name: Deploy Frontend to Vercel

on:
  push:
    branches:
      - main
      - staging
      - development
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-frontend.yml"
  pull_request:
    paths:
      - "frontend/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - production

permissions:
  contents: read

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENV="staging"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENV="preview"
          else
            ENV="development"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENV"

      - name: Set API URL
        id: api
        run: |
          ENV="${{ steps.env.outputs.environment }}"

          # Get API URL based on environment
          if [[ "$ENV" == "production" ]]; then
            API_URL="${{ vars.PRODUCTION_API_URL || 'https://api.yourdomain.com' }}"
            SITE_URL="${{ vars.PRODUCTION_SITE_URL || 'https://yourdomain.com' }}"
          elif [[ "$ENV" == "staging" ]]; then
            API_URL="${{ vars.STAGING_API_URL || 'https://api-staging.yourdomain.com' }}"
            SITE_URL="${{ vars.STAGING_SITE_URL || 'https://staging.yourdomain.com' }}"
          else
            API_URL="${{ vars.DEVELOPMENT_API_URL || 'https://api-dev.yourdomain.com' }}"
            SITE_URL="${{ vars.DEVELOPMENT_SITE_URL || 'https://dev.yourdomain.com' }}"
          fi

          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Map to Vercel environment
        id: vercel_env
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            echo "vercel_env=production" >> $GITHUB_OUTPUT
          elif [[ "$ENV" == "staging" ]]; then
            echo "vercel_env=preview" >> $GITHUB_OUTPUT
          else
            echo "vercel_env=preview" >> $GITHUB_OUTPUT
          fi

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Set environment variables in Vercel
        run: |
          # Remove any existing secret references and set as plain environment variables
          vercel env rm NEXT_PUBLIC_API_URL ${{ steps.vercel_env.outputs.vercel_env }} --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXT_PUBLIC_ENVIRONMENT ${{ steps.vercel_env.outputs.vercel_env }} --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXT_PUBLIC_SITE_URL ${{ steps.vercel_env.outputs.vercel_env }} --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXT_PUBLIC_GOOGLE_ANALYTICS_ID ${{ steps.vercel_env.outputs.vercel_env }} --yes --token=${{ secrets.VERCEL_TOKEN }} || true

          # Set environment variables as plain values (not secrets)
          echo "${{ steps.api.outputs.api_url }}" | vercel env add NEXT_PUBLIC_API_URL ${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ steps.env.outputs.environment }}" | vercel env add NEXT_PUBLIC_ENVIRONMENT ${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ steps.api.outputs.site_url }}" | vercel env add NEXT_PUBLIC_SITE_URL ${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ vars.GOOGLE_ANALYTICS_ID }}" | vercel env add NEXT_PUBLIC_GOOGLE_ANALYTICS_ID ${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Pull updated environment
        run: vercel pull --yes --environment=${{ steps.vercel_env.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Build Project Artifacts
        run: |
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        working-directory: ./frontend

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi

          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOY_URL"
        working-directory: ./frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Create deployment summary
        run: |
          echo "### ðŸš€ Frontend Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**API URL:** ${{ steps.api.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“Š Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const environment = '${{ steps.env.outputs.environment }}';

            const body = `## ðŸš€ Vercel Preview Deployment

            **Preview URL:** ${url}
            **Environment:** ${environment}
            **API URL:** ${{ steps.api.outputs.api_url }}

            ### Lighthouse Scores
            Run Lighthouse CI to check performance scores.

            ### Next Steps
            - Test the preview deployment
            - Check responsive design
            - Verify API integration
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Run smoke tests
        if: steps.env.outputs.environment != 'production'
        continue-on-error: true
        run: |
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"

          echo "Running smoke tests on $DEPLOY_URL"

          # Test homepage
          curl -f -s -o /dev/null -w "Homepage: %{http_code}\n" "$DEPLOY_URL/"

          # Test campaigns page
          curl -f -s -o /dev/null -w "Campaigns: %{http_code}\n" "$DEPLOY_URL/campaigns"

          # Test health endpoint
          curl -f -s -o /dev/null -w "Health: %{http_code}\n" "$DEPLOY_URL/api/health"

      - name: Alias production deployment
        if: steps.env.outputs.environment == 'production' && github.ref == 'refs/heads/main'
        run: |
          vercel alias set ${{ steps.deploy.outputs.url }} ${{ vars.PRODUCTION_DOMAIN }} --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
