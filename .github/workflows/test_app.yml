---
name: Test App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  FRONTEND_PATHS: |
    frontend/
    shared/
    .github/workflows/test_frontend.yml

  BACKEND_PATHS: |
    backend/
    docker-compose.yml
    Dockerfile
    pyproject.toml
    .github/workflows/test_backend.yml

  SSR_PATHS: |
    ssr/
    Dockerfile.ssr
    .github/workflows/test_ssr.yml

  FULLSTACK_ONLY_PATHS: |
    .github/workflows/test_fullstack.yml
    .github/workflows/test_app.yml

  DOC_PATHS: |
    *.md
    docs/
    README

jobs:
  analyze_changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      run_frontend: ${{ steps.changes.outputs.run_frontend }}
      run_backend: ${{ steps.changes.outputs.run_backend }}
      run_ssr: ${{ steps.changes.outputs.run_ssr }}
      run_fullstack: ${{ steps.changes.outputs.run_fullstack }}
      docs_only: ${{ steps.changes.outputs.docs_only }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes and determine required tests
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the base branch
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only \
              origin/${{ github.base_ref }}...HEAD)
          elif [ "${{ github.event_name }}" = "push" ]; then
            # For pushes, use github.event.before to capture all changes in the push
            BEFORE_SHA="${{ github.event.before }}"
            if [ -n "$BEFORE_SHA" ] && [ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" ]; then
              CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" HEAD)
            else
              # Fallback for first push or when before SHA is not available
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          else
            # For manual dispatch, compare against main branch
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)

            # If we're already on main, compare with previous commit
            if [ -z "$CHANGED_FILES" ]; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Initialize flags
          RUN_FRONTEND=false
          RUN_BACKEND=false
          RUN_SSR=false
          RUN_FULLSTACK=false
          DOCS_ONLY=true

          # Build the complete fullstack paths by combining all component paths
          FULLSTACK_PATHS="$FRONTEND_PATHS"$'\n'"$BACKEND_PATHS"$'\n'"$SSR_PATHS"$'\n'"$FULLSTACK_ONLY_PATHS"

          echo "Full stack paths include:"
          echo "$FULLSTACK_PATHS" | grep -v '^$' | sed 's/^/  - /'

          # Function to check if a file matches any pattern in a list
          matches_pattern() {
            local file="$1"
            local patterns="$2"

            while IFS= read -r pattern; do
              # Skip empty lines
              [[ -z "$pattern" ]] && continue

              # Check if pattern ends with / (directory match)
              if [[ "$pattern" =~ /$ ]]; then
                # Directory pattern - check if file starts with it
                if [[ "$file" =~ ^"$pattern" ]]; then
                  return 0
                fi
              else
                # Exact file match or glob pattern
                if [[ "$file" = "$pattern" ]] || [[ "$file" =~ $pattern ]]; then
                  return 0
                fi
              fi
            done <<< "$patterns"

            return 1
          }

          # Analyze each changed file
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "Analyzing: $file"

              # Check if it's a documentation file
              if ! matches_pattern "$file" "$DOC_PATHS"; then
                DOCS_ONLY=false
                echo "  -> Non-documentation file detected"
              fi

              # Check against each test category
              if matches_pattern "$file" "$FRONTEND_PATHS"; then
                RUN_FRONTEND=true
                RUN_FULLSTACK=true
                echo "  -> Frontend tests required"
              fi

              if matches_pattern "$file" "$BACKEND_PATHS"; then
                RUN_BACKEND=true
                RUN_FULLSTACK=true
                echo "  -> Backend tests required"
              fi

              if matches_pattern "$file" "$SSR_PATHS"; then
                RUN_SSR=true
                RUN_FULLSTACK=true
                echo "  -> SSR tests required"
              fi

              # Check if file triggers full stack tests
              if matches_pattern "$file" "$FULLSTACK_PATHS"; then
                RUN_FULLSTACK=true
                echo "  -> Full stack tests required"
              fi
            fi
          done <<< "$CHANGED_FILES"

          # For main branch pushes, always run full stack tests
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "$DOCS_ONLY" = "false" ]; then
            RUN_FULLSTACK=true
            echo "Main branch push - including full stack tests"
          fi

          # Set outputs
          echo "run_frontend=$RUN_FRONTEND" >> $GITHUB_OUTPUT
          echo "run_backend=$RUN_BACKEND" >> $GITHUB_OUTPUT
          echo "run_ssr=$RUN_SSR" >> $GITHUB_OUTPUT
          echo "run_fullstack=$RUN_FULLSTACK" >> $GITHUB_OUTPUT
          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT

          echo ""
          echo "Test Summary:"
          echo "  Documentation only: $DOCS_ONLY"
          echo "  Frontend tests: $RUN_FRONTEND"
          echo "  Backend tests: $RUN_BACKEND"
          echo "  SSR tests: $RUN_SSR"
          echo "  Full stack tests: $RUN_FULLSTACK"

  skip_tests:
    name: Skip Tests (Documentation Only)
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only == 'true'
    steps:
      - name: Documentation only
        run: |
          echo "Skipping tests - only documentation files were changed"
          echo "No application code changes detected"

  trigger_tests:
    name: Trigger Required Tests
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only != 'true'
    steps:
      - name: Trigger Frontend Tests
        if: needs.analyze_changes.outputs.run_frontend == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test_frontend.yml',
              ref: '${{ github.head_ref || github.ref }}',
            });
            console.log('Triggered Frontend Tests');

      - name: Trigger Backend Tests
        if: needs.analyze_changes.outputs.run_backend == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test_backend.yml',
              ref: '${{ github.head_ref || github.ref }}',
            });
            console.log('Triggered Backend Tests');

      - name: Trigger SSR Tests
        if: needs.analyze_changes.outputs.run_ssr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test_ssr.yml',
              ref: '${{ github.head_ref || github.ref }}',
            });
            console.log('Triggered SSR Tests');

      - name: Trigger Full Stack Tests
        if: needs.analyze_changes.outputs.run_fullstack == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test_fullstack.yml',
              ref: '${{ github.head_ref || github.ref }}',
            });
            console.log('Triggered Full Stack Tests');

      - name: Record triggered tests
        run: |
          echo "Triggered tests summary:"
          echo "Frontend: ${{ needs.analyze_changes.outputs.run_frontend }}"
          echo "Backend: ${{ needs.analyze_changes.outputs.run_backend }}"
          echo "SSR: ${{ needs.analyze_changes.outputs.run_ssr }}"
          echo "Full Stack: ${{ needs.analyze_changes.outputs.run_fullstack }}"

  wait_for_tests:
    name: Wait for Test Completion
    runs-on: ubuntu-latest
    needs: [analyze_changes, trigger_tests]
    if: needs.analyze_changes.outputs.docs_only != 'true'
    steps:
      - name: Wait for test workflows
        uses: actions/github-script@v7
        with:
          script: |
            const requiredTests = [];
            if ('${{ needs.analyze_changes.outputs.run_frontend }}' === 'true') {
              requiredTests.push('Frontend Tests');
            }
            if ('${{ needs.analyze_changes.outputs.run_backend }}' === 'true') {
              requiredTests.push('Backend Tests');
            }
            if ('${{ needs.analyze_changes.outputs.run_ssr }}' === 'true') {
              requiredTests.push('SSR Tests');
            }
            if ('${{ needs.analyze_changes.outputs.run_fullstack }}' === 'true') {
              requiredTests.push('Full Stack Integration Tests');
            }

            console.log('Waiting for tests:', requiredTests);

            const maxWaitTime = 30 * 60 * 1000; // 30 minutes
            const pollInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();

            async function checkWorkflows() {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head_sha: '${{ github.sha }}',
                per_page: 100
              });

              const relevantRuns = runs.data.workflow_runs.filter(run =>
                requiredTests.includes(run.name) &&
                run.head_sha === '${{ github.sha }}' &&
                new Date(run.created_at).getTime() > startTime - 60000
              );

              const statuses = {};
              for (const testName of requiredTests) {
                const testRuns = relevantRuns.filter(run => run.name === testName);
                if (testRuns.length === 0) {
                  statuses[testName] = 'not_started';
                } else {
                  const latestRun = testRuns.sort((a, b) =>
                    new Date(b.created_at) - new Date(a.created_at)
                  )[0];
                  statuses[testName] = latestRun.status === 'completed'
                    ? latestRun.conclusion
                    : latestRun.status;
                }
              }

              console.log('Test statuses:', statuses);

              const allComplete = requiredTests.every(test =>
                statuses[test] === 'success'
              );
              const anyFailed = requiredTests.some(test =>
                ['failure', 'cancelled'].includes(statuses[test])
              );

              if (allComplete) {
                return { done: true, success: true };
              } else if (anyFailed) {
                return { done: true, success: false };
              } else {
                return { done: false, success: false };
              }
            }

            // Poll until complete or timeout
            while (Date.now() - startTime < maxWaitTime) {
              const result = await checkWorkflows();
              if (result.done) {
                if (!result.success) {
                  throw new Error('One or more test workflows failed');
                }
                console.log('All tests completed successfully');
                return;
              }
              await new Promise(resolve => setTimeout(resolve, pollInterval));
            }

            throw new Error('Timeout waiting for test workflows to complete');

  tests_complete:
    name: All Tests Complete
    runs-on: ubuntu-latest
    needs: [analyze_changes, skip_tests, wait_for_tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          # Check if we skipped tests due to docs only
          if [ "${{ needs.analyze_changes.outputs.docs_only }}" = "true" ]; then
            echo "✅ Documentation only - no tests required"
            exit 0
          fi

          # Check if wait_for_tests job succeeded
          if [ "${{ needs.wait_for_tests.result }}" != "success" ]; then
            echo "❌ Test workflows failed or timed out"
            echo "Check the individual test workflow runs for details"
            exit 1
          fi

          echo "✅ All required tests passed successfully"
