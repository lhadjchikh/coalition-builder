name: Terraform Infrastructure CI/CD

permissions:
  contents: read

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy_infra.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy_infra.yml"
  workflow_dispatch:
    inputs:
      skip_plan:
        description: "Skip Terraform plan step (use if plan is timing out)"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

# Define environment variables at the workflow level
env:
  TF_LOG: error
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_app_db_username: ${{ secrets.APP_DB_USERNAME }}
  TF_VAR_app_db_password: ${{ secrets.APP_DB_PASSWORD }}
  TF_VAR_route53_zone_id: ${{ vars.TF_VAR_ROUTE53_ZONE_ID }}
  TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
  TF_VAR_acm_certificate_arn: ${{ vars.TF_VAR_ACM_CERTIFICATE_ARN }}
  TF_VAR_alert_email: ${{ vars.TF_VAR_ALERT_EMAIL }}
  TF_VAR_bastion_public_key: ${{ secrets.TF_VAR_BASTION_PUBLIC_KEY }}
  TF_VAR_allowed_hosts: "localhost,127.0.0.1,${{ vars.TF_VAR_DOMAIN_NAME }},*.${{ vars.TF_VAR_DOMAIN_NAME }}"
  TF_VAR_csrf_trusted_origins: "https://${{ vars.TF_VAR_DOMAIN_NAME }},https://www.${{ vars.TF_VAR_DOMAIN_NAME }}"
  TF_VAR_site_password_enabled: ${{ vars.SITE_PASSWORD_ENABLED }}
  TF_VAR_site_password: ${{ secrets.SITE_PASSWORD }}
  TF_VAR_site_username: ${{ vars.SITE_USERNAME }}

jobs:
  # Wait for terraform tests to complete successfully before deploying to production
  # This only runs when there are terraform changes (same trigger as this workflow)
  wait_for_tests:
    name: Wait for Terraform Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout to check for terraform changes
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need at least 2 commits to compare

      - name: Check if terraform tests should be running
        id: check_terraform_changes
        run: |
          # Check if there are terraform changes in this push
          if git diff --name-only HEAD~1 HEAD | grep -E '^terraform/'; then
            echo "terraform_changed=true" >> $GITHUB_OUTPUT
            echo "Terraform files changed - will wait for tests"
          else
            echo "terraform_changed=false" >> $GITHUB_OUTPUT
            echo "No terraform changes - skipping test wait"
          fi

      - name: Wait for Terraform Tests workflow
        if: steps.check_terraform_changes.outputs.terraform_changed == 'true'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait_for_tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Terraform Check / Terraform Tests / Terraform Tests Complete
          ref: ${{ github.event.after || github.sha }}
          timeoutSeconds: 1800 # 30 minutes timeout
          intervalSeconds: 60 # Check every minute

      - name: Check terraform tests result
        if: steps.check_terraform_changes.outputs.terraform_changed == 'true' && steps.wait_for_tests.outputs.conclusion != 'success'
        run: |
          echo "Terraform tests did not complete successfully: ${{ steps.wait_for_tests.outputs.conclusion }}"
          exit 1

  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: prod
    needs: [wait_for_tests]
    if: always() && (needs.wait_for_tests.result == 'success' || github.event_name == 'workflow_dispatch')
    outputs:
      terraform_plan: ${{ steps.plan.outputs.stdout || steps.skip_plan.outputs.stdout }}
      plan_success: ${{ steps.plan.outputs.plan_success || steps.skip_plan.outputs.plan_success }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.1

      - name: Setup Remote State and Backend
        run: |
          cd terraform
          # Make the setup script executable
          chmod +x ./scripts/setup_remote_state.sh
          # Run the setup script to create S3 bucket and DynamoDB table
          ./scripts/setup_remote_state.sh

          # Setup backend configuration for production deployment
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Using backend bucket: coalition-terraform-state-${ACCOUNT_ID}"
          echo "Using state key: production/terraform.tfstate"

      - name: Terraform Init
        run: |
          cd terraform
          # Use -input=false to prevent interactive prompts
          timeout 5m terraform init -backend-config=backend.hcl -input=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.skip_plan != 'true'
        run: |
          cd terraform

          echo "Running terraform plan..."
          set +e  # Don't exit on error
          terraform plan -no-color -input=false > plan_output.txt 2>&1
          PLAN_EXIT_CODE=$?
          set -e  # Resume exiting on error

          echo "Plan completed with exit code: $PLAN_EXIT_CODE"

          # Always make stdout output available for debugging
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $PLAN_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform plan failed or timed out with exit code $PLAN_EXIT_CODE"
            echo "plan_success=false" >> $GITHUB_OUTPUT
            
            # Output errors for debugging
            echo "::group::Plan output"
            cat plan_output.txt
            echo "::endgroup::"
            
            # Fail the step explicitly
            exit 1
          else
            echo "plan_success=true" >> $GITHUB_OUTPUT
            echo "::notice::Plan completed successfully"
          fi

      - name: Skip Terraform Plan
        id: skip_plan
        if: github.event.inputs.skip_plan == 'true'
        run: |
          echo "Skipping Terraform plan as requested"
          echo "stdout=Plan step skipped as requested" >> $GITHUB_OUTPUT
          echo "plan_success=manual_override" >> $GITHUB_OUTPUT

      - name: Debug Terraform State
        if: always() && github.event.inputs.skip_plan != 'true'
        run: |
          echo "::group::Environment Variables"
          echo "Checking for Terraform variables"
          env | grep -E "^TF_VAR_" | cut -d= -f1 | sort
          echo "::endgroup::"

          cd terraform
          echo "::group::Terraform Environment"
          terraform version
          ls -la
          echo "::endgroup::"

          echo "::group::Terraform Provider Lock File"
          if [ -f .terraform.lock.hcl ]; then
            cat .terraform.lock.hcl
          else
            echo "No .terraform.lock.hcl file found"
          fi
          echo "::endgroup::"

          echo "::group::Terraform Directory Structure"
          if [ -d .terraform ]; then
            ls -la .terraform
            echo "Providers:"
            find .terraform -name "*.tf" -o -name "*.hcl" | sort
          else
            echo "No .terraform directory found"
          fi
          echo "::endgroup::"

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: prod
    needs: terraform_plan
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.1

      - name: Setup Backend Configuration
        run: |
          cd terraform
          # Regenerate backend configuration for apply job
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Using backend bucket: coalition-terraform-state-${ACCOUNT_ID}"

          cat > backend.hcl << EOF
          bucket         = "coalition-terraform-state-${ACCOUNT_ID}"
          key            = "production/terraform.tfstate"
          region         = "us-east-1"
          encrypt        = true
          dynamodb_table = "coalition-terraform-locks"
          EOF

          echo "Backend configuration created for production deployment"

      - name: Terraform Init
        run: |
          cd terraform
          # Use -input=false to prevent interactive prompts
          timeout 5m terraform init -backend-config=backend.hcl -input=false

      - name: Verify Security Group Rules
        # Check and potentially recreate missing security group rules before apply
        if: github.ref == 'refs/heads/main'
        continue-on-error: true
        run: |
          cd terraform
          # Extract security group IDs from terraform state if possible
          echo "Checking for missing security group rules..."

          # Try to get security group IDs from state
          if terraform state show module.security.aws_security_group.alb_sg 2>/dev/null | grep -q "id"; then
            ALB_SG_ID=$(terraform state show module.security.aws_security_group.alb_sg 2>/dev/null | grep "id" | head -1 | awk '{print $3}' | tr -d '"')
            APP_SG_ID=$(terraform state show module.security.aws_security_group.app_sg 2>/dev/null | grep "id" | head -1 | awk '{print $3}' | tr -d '"')
            
            if [ ! -z "$ALB_SG_ID" ] && [ ! -z "$APP_SG_ID" ]; then
              echo "Found security groups in state: ALB=$ALB_SG_ID, APP=$APP_SG_ID"
              
              # Check if the critical rules exist
              MISSING_RULES=false
              
              # Check ALB egress rules
              if ! aws ec2 describe-security-group-rules \
                --filters "Name=group-id,Values=$ALB_SG_ID" "Name=is-egress,Values=true" \
                --query "SecurityGroupRules[?FromPort==\`8000\` || FromPort==\`3000\`]" \
                --output text | grep -q "$APP_SG_ID"; then
                echo "⚠️  Missing ALB egress rules detected"
                MISSING_RULES=true
              fi
              
              # Check APP ingress rules  
              if ! aws ec2 describe-security-group-rules \
                --filters "Name=group-id,Values=$APP_SG_ID" "Name=is-egress,Values=false" \
                --query "SecurityGroupRules[?FromPort==\`8000\` || FromPort==\`3000\`]" \
                --output text | grep -q "$ALB_SG_ID"; then
                echo "⚠️  Missing APP ingress rules detected"
                MISSING_RULES=true
              fi
              
              if [ "$MISSING_RULES" = true ]; then
                echo "::warning::Critical security group rules are missing. Terraform will recreate them."
                # Force terraform to refresh the state for these specific resources
                terraform refresh -target=module.security.aws_vpc_security_group_egress_rule.alb_to_api \
                  -target=module.security.aws_vpc_security_group_egress_rule.alb_to_app \
                  -target=module.security.aws_vpc_security_group_ingress_rule.api_from_alb \
                  -target=module.security.aws_vpc_security_group_ingress_rule.app_from_alb || true
              else
                echo "✅ All critical security group rules are present"
              fi
            fi
          else
            echo "Could not retrieve security group IDs from state - will proceed with normal apply"
          fi

      - name: Terraform Apply
        # Only apply on main branch - push events include direct pushes and PR merges to main
        # Also ensure plan was successful or manually overridden
        if: github.ref == 'refs/heads/main'
        run: |
          cd terraform

          # Use unique filename to avoid conflicts between concurrent workflows
          TF_APPLY_OUTPUT_FILE="/tmp/terraform_apply_output_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}.txt"

          # Function to handle apply with better error reporting
          run_apply() {
            local output_file="$TF_APPLY_OUTPUT_FILE"
            
            echo "Starting Terraform apply..."
            if timeout 15m terraform apply -auto-approve -input=false 2>&1 | tee "$output_file"; then
              echo "✅ Terraform apply completed successfully"
              return 0
            else
              local exit_code=$?
              echo "❌ Terraform apply failed with exit code: $exit_code"
              
              # Check for specific error patterns
              if grep -q "Error acquiring the state lock" "$output_file"; then
                echo "::error::🔒 STATE LOCK ERROR: Terraform state is locked. Another operation may be in progress."
                echo "::error::To force unlock, run: terraform force-unlock <LOCK_ID>"
                echo "::error::Check the DynamoDB table 'terraform-state-lock' for stuck locks"
                
                # Extract lock ID if present
                if grep -q "Lock Info:" "$output_file"; then
                  echo "::error::Lock details:"
                  grep -A 5 "Lock Info:" "$output_file"
                fi
              elif grep -q "timeout" "$output_file" || [ "$exit_code" -eq 124 ]; then
                echo "::error::⏱️ TIMEOUT ERROR: Terraform apply took longer than 15 minutes"
                echo "::error::This may indicate a state lock issue or a complex infrastructure change"
              elif grep -q "Error: " "$output_file"; then
                echo "::error::Terraform errors detected:"
                grep "Error: " "$output_file" | head -10
              fi
              
              return $exit_code
            fi
          }

          # Run apply with error handling
          if ! run_apply; then
            echo "::error::Terraform apply failed. Check the logs above for details."
            
            # Create job summary for better visibility
            echo "## ❌ Terraform Apply Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Store the exit code from run_apply
            local apply_exit_code=$?
            
            # Check for common error patterns and add to summary
            if grep -q "Error acquiring the state lock" "$TF_APPLY_OUTPUT_FILE" 2>/dev/null; then
              echo "### 🔒 State Lock Error Detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The Terraform state is currently locked. This usually means:" >> $GITHUB_STEP_SUMMARY
              echo "- Another Terraform operation is in progress" >> $GITHUB_STEP_SUMMARY
              echo "- A previous operation was interrupted and didn't release the lock" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**To resolve:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Wait for any running operations to complete" >> $GITHUB_STEP_SUMMARY
              echo "2. If no operations are running, manually unlock with: \`terraform force-unlock <LOCK_ID>\`" >> $GITHUB_STEP_SUMMARY
              echo "3. Check the DynamoDB table \`terraform-state-lock\` for stuck locks" >> $GITHUB_STEP_SUMMARY
            elif grep -q "timeout" "$TF_APPLY_OUTPUT_FILE" 2>/dev/null || [ "$apply_exit_code" -eq 124 ]; then
              echo "### ⏱️ Timeout Error" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The operation timed out after 15 minutes. This could indicate:" >> $GITHUB_STEP_SUMMARY
              echo "- A state lock that couldn't be acquired" >> $GITHUB_STEP_SUMMARY
              echo "- A complex infrastructure change taking too long" >> $GITHUB_STEP_SUMMARY
              echo "- Network connectivity issues" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Error Details" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check the workflow logs for specific error messages." >> $GITHUB_STEP_SUMMARY
            fi
            
            exit 1
          fi

          # Add success summary
          echo "## ✅ Terraform Apply Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure changes have been successfully applied to production." >> $GITHUB_STEP_SUMMARY
