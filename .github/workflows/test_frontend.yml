name: Frontend Tests

on:
  workflow_call: # Allow this workflow to be called by other workflows

# Set explicit permissions for the GITHUB_TOKEN
permissions:
  contents: read # Only need read access to checkout the code
  actions: read # Need actions:read for codecov in protected branches

jobs:
  test:
    runs-on: ubuntu-latest
    # We'll run with simplified tests for non-frontend changes to save resources
    # but still ensure the deployment workflow is triggered

    defaults:
      run:
        working-directory: frontend

    strategy:
      matrix:
        node-version: ["22.x"]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci || npm ci --legacy-peer-deps

      - name: Check if tests are necessary
        id: check_tests
        run: |
          # Use git to check if any frontend files were changed
          git fetch origin main
          CHANGES=$(git diff --name-only HEAD origin/main | grep -c "^frontend/" || echo 0)

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" && $CHANGES -eq 0 ]]; then
            echo "Running minimal tests for non-frontend changes to main branch"
            echo "skip_full_tests=true" >> $GITHUB_OUTPUT
          else
            echo "Running full test suite"
            echo "skip_full_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run minimal test (for non-relevant changes)
        if: steps.check_tests.outputs.skip_full_tests == 'true'
        run: |
          echo "Skipping intensive tests for non-relevant changes to ensure deployment workflow gets triggered"
          echo "Minimal test passed, allowing deployment workflow to trigger"
          mkdir -p coverage
          echo '{"success":true}' > coverage/coverage.json

      - name: Run tests
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: lhadjchikh/coalition-builder
          directory: ./frontend/coverage
          flags: javascript
          name: javascript-coverage
          fail_ci_if_error: false # Don't fail CI if Codecov has issues

      - name: Build
        run: npm run build

  # Test SSR Docker build to catch deployment issues early
  test_ssr_docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test SSR Docker build
        run: |
          echo "Testing SSR Docker build to catch deployment issues early..."
          docker build -f Dockerfile.ssr -t test-ssr . \
            --build-arg NEXT_PUBLIC_API_URL=http://localhost:8000 \
            --build-arg API_URL=http://localhost:8000
          echo "✅ SSR Docker build successful"

      - name: Test SSR container startup
        run: |
          echo "Testing SSR container startup..."
          # Start container in background
          docker run -d --name test-ssr -p 3000:3000 test-ssr

          # Wait for container to start with dynamic timeout
          echo "Waiting for SSR container to be ready..."
          timeout=60
          until docker exec test-ssr node healthcheck.js 2>/dev/null || [ $timeout -le 0 ]; do
            echo "Waiting for SSR container readiness... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout-5))
          done

          if [ $timeout -le 0 ]; then
            echo "❌ SSR container failed to become ready in time"
            echo "Container logs:"
            docker logs test-ssr
            exit 1
          fi

          # Test health endpoint one final time
          echo "Testing health endpoint..."
          docker exec test-ssr node healthcheck.js

          # Cleanup
          docker stop test-ssr
          docker rm test-ssr
          echo "✅ SSR container startup test successful"
