name: Frontend Tests

on:
  workflow_call: # Allow this workflow to be called by other workflows

# Set explicit permissions for the GITHUB_TOKEN
permissions:
  contents: read # Only need read access to checkout the code
  actions: read # Need actions:read for codecov in protected branches
  id-token: write # For Codecov authentication on protected branches

jobs:
  test:
    runs-on: ubuntu-latest
    # We'll run with simplified tests for non-frontend changes to save resources
    # but still ensure the deployment workflow is triggered

    defaults:
      run:
        working-directory: frontend

    strategy:
      matrix:
        node-version: ["22.x"]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --no-optional || npm ci --legacy-peer-deps --no-optional

      - name: Check if tests are necessary
        id: check_tests
        run: |
          # Use git to check if any frontend files were changed
          git fetch origin main
          CHANGES=$(git diff --name-only HEAD origin/main | grep -c "^frontend/" || echo 0)

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" && $CHANGES -eq 0 ]]; then
            echo "Running minimal tests for non-frontend changes to main branch"
            echo "skip_full_tests=true" >> $GITHUB_OUTPUT
          else
            echo "Running full test suite"
            echo "skip_full_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run minimal test (for non-relevant changes)
        if: steps.check_tests.outputs.skip_full_tests == 'true'
        run: |
          echo "Skipping intensive tests for non-relevant changes to ensure deployment workflow gets triggered"
          echo "Minimal test passed, allowing deployment workflow to trigger"
          mkdir -p coverage
          echo '{"success":true}' > coverage/coverage.json

      - name: Run tests
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: lhadjchikh/coalition-builder
          directory: ./frontend/coverage
          flags: javascript
          name: javascript-coverage
          fail_ci_if_error: false # Don't fail CI if Codecov has issues

      - name: Build
        run: npm run build
