name: Deploy to ECS

on:
  # This workflow will run after any of the test workflows complete successfully on main
  workflow_run:
    workflows:
      - "Frontend Tests"
      - "Backend Tests"
      - "Full Stack Integration Tests"
    types:
      - completed
    branches: [main]

  # Allow manual triggers regardless of test outcomes
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip test requirement (use with caution)"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  check_tests:
    name: Check Test Status
    runs-on: ubuntu-latest
    # When triggered by workflow_run, only proceed if the workflow succeeded
    # For manual triggers, check if we should skip test requirement
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'true')
    outputs:
      workflow_name: ${{ steps.set_output.outputs.workflow_name }}
    steps:
      - name: Set output values
        id: set_output
        run: |
          echo "workflow_name=${{ github.event.workflow_run.name || 'Manual Trigger' }}" >> $GITHUB_OUTPUT
          echo "Tests passed or skipped, proceeding with deployment"
          echo "Triggered by: ${{ github.event.workflow_run.name || 'Manual Trigger' }}"

  build_and_push:
    name: Build and Push Docker Images
    needs: check_tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: landandbay
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    name: Deploy to ECS
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition landandbay --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: task-definition.json
          container-name: landandbay
          image: ${{ env.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: landandbay-service
          cluster: landandbay-cluster
          wait-for-service-stability: true
