name: Deploy to ECS

on:
  # This workflow will run after the test app workflow completes successfully on main
  workflow_run:
    workflows:
      - "Test App"
      - "Terraform Infrastructure CI/CD"
    types:
      - completed
    branches: [main]

  # Allow manual triggers regardless of test outcomes
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip test requirement (use with caution)"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

# Permissions needed for deployment
permissions:
  contents: read # For checkout
  id-token: write # For AWS authentication

env:
  API_ECR_REPOSITORY: coalition-api
  SSR_ECR_REPOSITORY: coalition-ssr

jobs:
  check_deployment_trigger:
    name: Check Deployment Trigger and Prevent Duplicates
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ fromJSON(steps.check_trigger.outputs.result).should_deploy }}
      trigger_type: ${{ fromJSON(steps.check_trigger.outputs.result).trigger_type }}
    steps:
      - name: Check trigger type and prevent duplicate deployments
        id: check_trigger
        uses: actions/github-script@v7
        with:
          script: |
            const triggerWorkflow = '${{ github.event.workflow_run.name }}';
            const eventName = '${{ github.event_name }}';

            console.log(`Event name: ${eventName}`);
            console.log(`Trigger workflow: ${triggerWorkflow}`);

            let shouldDeploy = false;
            let triggerType = 'unknown';

            if (eventName === 'workflow_dispatch') {
              shouldDeploy = true;
              triggerType = 'manual';
              console.log('✅ Manual trigger - proceeding with deployment');
            } else if (eventName === 'workflow_run') {
              const conclusion = '${{ github.event.workflow_run.conclusion }}';
              console.log(`Workflow conclusion: ${conclusion}`);
              
              if (conclusion !== 'success') {
                console.log('❌ Triggering workflow did not succeed - skipping deployment');
                shouldDeploy = false;
                triggerType = 'failed_workflow';
              } else if (triggerWorkflow === 'Test App') {
                triggerType = 'test_app';
                
                const currentCommitSha = '${{ github.event.workflow_run.head_sha }}';
                console.log(`Current Test App commit: ${currentCommitSha}`);
                
                // Check for recent infrastructure deployments
                const infrastructureRuns = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'deploy_infra.yml',
                  branch: 'main',
                  per_page: 10 // Check more runs to find matching commits
                });
                
                const recentInfraRun = infrastructureRuns.data.workflow_runs.find(run => 
                  run.status === 'completed' && 
                  run.conclusion === 'success' &&
                  new Date(run.updated_at) > new Date(Date.now() - 30 * 60 * 1000) // Within last 30 minutes
                );
                
                if (recentInfraRun) {
                  console.log(`Found recent infrastructure run: ${recentInfraRun.head_sha} at ${recentInfraRun.updated_at}`);
                  
                  // Check if the infrastructure deployment is for the same commit or contains our changes
                  if (recentInfraRun.head_sha === currentCommitSha) {
                    console.log('🔄 Same commit deployed infrastructure - will be handled by infra trigger');
                    shouldDeploy = false;
                    triggerType = 'deferred_to_infra_same_commit';
                  } else {
                    // Check if the infrastructure run's commit is ahead of or contains our changes
                    try {
                      const compareResult = await github.rest.repos.compareCommits({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        base: currentCommitSha,
                        head: recentInfraRun.head_sha
                      });
                      
                      if (compareResult.data.status === 'ahead') {
                        console.log('🏗️ Infrastructure deployment is ahead - contains our changes, will be handled by infra trigger');
                        shouldDeploy = false;
                        triggerType = 'deferred_to_infra_ahead';
                      } else {
                        console.log('✅ Infrastructure deployment is for different/older code - proceeding with Test App deployment');
                        shouldDeploy = true;
                      }
                    } catch (error) {
                      console.log(`Could not compare commits: ${error.message}`);
                      console.log('✅ Proceeding with Test App deployment to be safe');
                      shouldDeploy = true;
                    }
                  }
                } else {
                  console.log('✅ No recent infrastructure deployment - proceeding with Test App deployment');
                  shouldDeploy = true;
                }
              } else if (triggerWorkflow === 'Terraform Infrastructure CI/CD') {
                triggerType = 'infrastructure';
                console.log('🏗️ Infrastructure deployment completed - proceeding with app deployment');
                shouldDeploy = true;
              }
            }

            console.log(`Final decision: shouldDeploy=${shouldDeploy}, triggerType=${triggerType}`);

            // Set outputs using github-script's return mechanism
            return {
              should_deploy: shouldDeploy.toString(),
              trigger_type: triggerType
            };

  check_changes:
    name: Check if only documentation changed
    runs-on: ubuntu-latest
    needs: check_deployment_trigger
    if: needs.check_deployment_trigger.outputs.should_deploy == 'true'
    outputs:
      docs_only: ${{ steps.changes.outputs.docs_only }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for documentation-only changes
        id: changes
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          TRIGGER_TYPE: ${{ needs.check_deployment_trigger.outputs.trigger_type }}
        run: |
          # Infrastructure deployments should always deploy the app
          if [ "$TRIGGER_TYPE" = "infrastructure" ]; then
            echo "Infrastructure deployment trigger - always deploying app"
            echo "docs_only=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get list of changed files based on trigger type
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # For workflow_run, get files changed in the triggering workflow
            echo "Workflow run trigger detected"
            echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
            echo "Base SHA: $HEAD_BRANCH"
            
            # Fetch the latest main branch to ensure we have a good comparison point
            git fetch origin main
            
            # Compare against main branch to catch all changes in the push
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
            
            # If that fails or returns empty, fall back to the workflow run head commit
            if [ -z "$CHANGED_FILES" ]; then
              echo "Fallback: comparing last commit"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          else
            # For manual dispatch, compare against main branch
            echo "Manual dispatch trigger detected"
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
            
            # If we're already on main or the comparison fails, compare with previous commit
            if [ -z "$CHANGED_FILES" ]; then
              echo "Fallback: comparing with previous commit on main"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if all changed files are documentation
          DOCS_ONLY=true
          while IFS= read -r file; do
            if [[ -n "$file" ]] && [[ ! "$file" =~ \.(md|txt|rst)$ ]] && [[ ! "$file" =~ ^docs/ ]] && [[ ! "$file" =~ README ]]; then
              echo "Non-documentation file changed: $file"
              DOCS_ONLY=false
              break
            fi
          done <<< "$CHANGED_FILES"

          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT

          if [ "$DOCS_ONLY" = "true" ]; then
            echo "Only documentation files changed, skipping deployment"
          else
            echo "Code changes detected, proceeding with deployment"
          fi

  check_tests:
    name: Check Test Status
    runs-on: ubuntu-latest
    needs: [check_deployment_trigger, check_changes]
    # Skip deployment if only docs changed, otherwise check test status
    if: |
      needs.check_changes.outputs.docs_only != 'true' && (
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'true')
      )
    outputs:
      workflow_name: ${{ steps.set_output.outputs.workflow_name }}
    steps:
      - name: Set output values
        id: set_output
        env:
          TRIGGER_TYPE: ${{ needs.check_deployment_trigger.outputs.trigger_type }}
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name || 'Manual Trigger' }}"
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT

          if [ "$TRIGGER_TYPE" = "infrastructure" ]; then
            echo "🏗️ Infrastructure deployment completed successfully, proceeding with app deployment"
            echo "No additional tests required after infrastructure deployment"
          elif [ "$TRIGGER_TYPE" = "test_app" ]; then
            echo "✅ Test App workflow completed successfully, proceeding with deployment"
          else
            echo "✅ Manual trigger or other workflow completed, proceeding with deployment"
          fi

          echo "Triggered by: $WORKFLOW_NAME"

  skip_deployment_trigger:
    name: Skip Deployment (Trigger Check Failed)
    runs-on: ubuntu-latest
    needs: check_deployment_trigger
    if: needs.check_deployment_trigger.outputs.should_deploy != 'true'
    steps:
      - name: Skip deployment message
        env:
          TRIGGER_TYPE: ${{ needs.check_deployment_trigger.outputs.trigger_type }}
        run: |
          echo "Deployment skipped based on trigger analysis"
          echo "Trigger type: $TRIGGER_TYPE"

          case "$TRIGGER_TYPE" in
            "failed_workflow")
              echo "❌ Triggering workflow did not complete successfully"
              ;;
            "deferred_to_infra_same_commit")
              echo "🔄 Deployment deferred - same commit being deployed by infrastructure workflow"
              ;;
            "deferred_to_infra_ahead")
              echo "🏗️ Deployment deferred - infrastructure workflow contains our changes and will deploy"
              ;;
            *)
              echo "ℹ️ Deployment conditions not met"
              ;;
          esac

  skip_deployment:
    name: Skip Deployment (Documentation Only)
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.docs_only == 'true'
    steps:
      - name: Skip deployment message
        run: |
          echo "Deployment skipped: Only documentation files were changed"
          echo "No application code changes detected"

  build_and_push:
    name: Build and Push Docker Images
    needs: check_tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      api_image: ${{ steps.image-outputs.outputs.api_image }}
      ssr_image: ${{ steps.image-outputs.outputs.ssr_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set up Docker Buildx for faster builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers for API builds
      - name: Cache API Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-api
          key: ${{ runner.os }}-buildx-api-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-api-

      # Cache Docker layers for SSR builds
      - name: Cache SSR Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-ssr
          key: ${{ runner.os }}-buildx-ssr-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ssr-

      # Build and push the Django app Docker image with layer caching
      - name: Build and push Django app image
        id: build-app-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.API_ECR_REPOSITORY }}:${{ github.sha }}-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64

      # Build and push the SSR Docker image with layer caching
      - name: Build and push SSR image
        id: build-ssr-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./Dockerfile.ssr
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.SSR_ECR_REPOSITORY }}:${{ github.sha }}-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache-ssr
          cache-to: type=local,dest=/tmp/.buildx-cache-ssr-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64

      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          # Move API cache
          rm -rf /tmp/.buildx-cache-api
          mv /tmp/.buildx-cache-api-new /tmp/.buildx-cache-api

          # Move SSR cache
          rm -rf /tmp/.buildx-cache-ssr
          mv /tmp/.buildx-cache-ssr-new /tmp/.buildx-cache-ssr

      # Set outputs for use in other jobs
      - name: Set output image variables
        id: image-outputs
        run: |
          API_IMAGE_TAG="${{ github.sha }}-${{ github.run_number }}"
          API_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.API_ECR_REPOSITORY }}:$API_IMAGE_TAG"
          SSR_IMAGE_TAG="${{ github.sha }}-${{ github.run_number }}"
          SSR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.SSR_ECR_REPOSITORY }}:$SSR_IMAGE_TAG"
          echo "api_image=$API_IMAGE" >> $GITHUB_OUTPUT
          echo "ssr_image=$SSR_IMAGE" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition coalition --query taskDefinition > task-definition.json

      - name: Update Django app container image in ECS task definition
        id: task-def-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ needs.build_and_push.outputs.api_image }}

      # Check if SSR container exists in the task definition
      - name: Check for SSR container
        id: check-ssr
        run: |
          # Use jq to properly parse JSON and check for SSR container
          if jq -e '.containerDefinitions[] | select(.name=="ssr")' task-definition.json > /dev/null 2>&1; then
            echo "has_ssr=true" >> $GITHUB_OUTPUT
            echo "SSR container found in task definition"
          else
            echo "has_ssr=false" >> $GITHUB_OUTPUT
            echo "No SSR container found in task definition"
          fi

      # Only update the SSR container if it exists in the task definition
      - name: Update SSR container image in ECS task definition
        id: task-def-ssr
        if: ${{ steps.check-ssr.outputs.has_ssr == 'true' }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-app.outputs.task-definition }}
          container-name: ssr
          image: ${{ needs.build_and_push.outputs.ssr_image }}

      # Choose the right task definition based on whether SSR was updated
      - name: Set final task definition
        id: set-final-taskdef
        run: |
          if [[ "${{ steps.check-ssr.outputs.has_ssr }}" == "true" ]]; then
            echo "final_taskdef=${{ steps.task-def-ssr.outputs.task-definition }}" >> $GITHUB_OUTPUT
            echo "Using task definition with SSR container updated"
          else
            echo "final_taskdef=${{ steps.task-def-app.outputs.task-definition }}" >> $GITHUB_OUTPUT
            echo "Using task definition with only app container updated (no SSR)"
          fi

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.set-final-taskdef.outputs.final_taskdef }}
          service: coalition-service
          cluster: coalition-cluster
          wait-for-service-stability: true
