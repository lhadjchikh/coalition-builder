name: Deploy to ECS

on:
  # This workflow will run after the test workflows complete successfully on main
  workflow_run:
    workflows:
      - "Frontend Tests"
      - "Backend Tests"
      - "Full Stack Integration Tests"
    types:
      - completed
    branches: [main]

  # Allow manual triggers regardless of test outcomes
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "Skip test requirement (use with caution)"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

# Permissions needed for deployment
permissions:
  contents: read # For checkout
  id-token: write # For AWS authentication

env:
  APP_ECR_REPOSITORY: landandbay
  SSR_ECR_REPOSITORY: landandbay-ssr

jobs:
  check_tests:
    name: Check Test Status
    runs-on: ubuntu-latest
    # When triggered by workflow_run, only proceed if the workflow succeeded
    # For manual triggers, check if we should skip test requirement
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'true')
    outputs:
      workflow_name: ${{ steps.set_output.outputs.workflow_name }}
    steps:
      - name: Set output values
        id: set_output
        run: |
          echo "workflow_name=${{ github.event.workflow_run.name || 'Manual Trigger' }}" >> $GITHUB_OUTPUT
          echo "Tests passed or skipped, proceeding with deployment"
          echo "Triggered by: ${{ github.event.workflow_run.name || 'Manual Trigger' }}"

  build_and_push:
    name: Build and Push Docker Images
    needs: check_tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      app_image: ${{ steps.image-outputs.outputs.app_image }}
      ssr_image: ${{ steps.image-outputs.outputs.ssr_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Set up Docker Buildx for faster builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and push the Django app Docker image with layer caching
      - name: Build and push Django app image
        id: build-app-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_ECR_REPOSITORY }}:${{ github.sha }}-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64

      # Build and push the SSR Docker image with layer caching
      - name: Build and push SSR image
        id: build-ssr-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: ./ssr
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.SSR_ECR_REPOSITORY }}:${{ github.sha }}-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64

      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Set outputs for use in other jobs
      - name: Set output image variables
        id: image-outputs
        run: |
          APP_IMAGE_TAG="${{ github.sha }}-${{ github.run_number }}"
          APP_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.APP_ECR_REPOSITORY }}:$APP_IMAGE_TAG"
          SSR_IMAGE_TAG="${{ github.sha }}-${{ github.run_number }}"
          SSR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.SSR_ECR_REPOSITORY }}:$SSR_IMAGE_TAG"
          echo "app_image=$APP_IMAGE" >> $GITHUB_OUTPUT
          echo "ssr_image=$SSR_IMAGE" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition landandbay --query taskDefinition > task-definition.json

      - name: Update Django app container image in ECS task definition
        id: task-def-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ needs.build_and_push.outputs.app_image }}

      # Check if SSR container exists in the task definition
      - name: Check for SSR container
        id: check-ssr
        run: |
          if grep -q '"name": *"ssr"' task-definition.json; then
            echo "has_ssr=true" >> $GITHUB_OUTPUT
            echo "SSR container found in task definition"
          else
            echo "has_ssr=false" >> $GITHUB_OUTPUT
            echo "No SSR container found in task definition"
          fi

      # Only update the SSR container if it exists in the task definition
      - name: Update SSR container image in ECS task definition
        id: task-def-ssr
        if: steps.check-ssr.outputs.has_ssr == 'true'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-app.outputs.task-definition }}
          container-name: ssr
          image: ${{ needs.build_and_push.outputs.ssr_image }}

      # Choose the right task definition based on whether SSR was updated
      - name: Set final task definition
        id: set-final-taskdef
        run: |
          if [[ "${{ steps.check-ssr.outputs.has_ssr }}" == "true" ]]; then
            echo "final_taskdef=${{ steps.task-def-ssr.outputs.task-definition }}" >> $GITHUB_OUTPUT
          else
            echo "final_taskdef=${{ steps.task-def-app.outputs.task-definition }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.set-final-taskdef.outputs.final_taskdef }}
          service: landandbay-service
          cluster: landandbay-cluster
          wait-for-service-stability: true
