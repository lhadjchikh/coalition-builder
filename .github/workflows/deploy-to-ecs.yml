name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write
  deployments: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_db_name: ${{ secrets.TF_VAR_db_name || 'landandbay' }}
  TF_VAR_app_db_username: ${{ secrets.APP_DB_USERNAME || 'landandbay_app' }}
  TF_VAR_app_db_password: ${{ secrets.APP_DB_PASSWORD }}
  TF_VAR_route53_zone_id: ${{ secrets.TF_VAR_route53_zone_id }}
  TF_VAR_domain_name: ${{ secrets.TF_VAR_domain_name }}
  TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_acm_certificate_arn }}
  TERRAFORM_DIR: terraform

jobs:
  terraform:
    name: "Terraform Infrastructure"
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.terraform.outputs.ecr_repository_url }}
      ecs_cluster_name: ${{ steps.terraform.outputs.ecs_cluster_name }}
      ecs_service_name: ${{ steps.terraform.outputs.ecs_service_name }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0
    
    - name: Terraform Init
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      id: terraform
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: |
        terraform apply -auto-approve tfplan
        
        # Export outputs as step outputs
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        echo "ecs_service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Run tests
      run: |
        cd backend
        # Setup Python and dependencies using Poetry
        pip install poetry
        poetry install
        poetry run python manage.py test

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REPOSITORY_URL: ${{ needs.terraform.outputs.ecr_repository_url }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
        docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
        docker tag $ECR_REPOSITORY_URL:$IMAGE_TAG $ECR_REPOSITORY_URL:latest
        docker push $ECR_REPOSITORY_URL:latest
        echo "image=$ECR_REPOSITORY_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Force new deployment
      run: |
        aws ecs update-service \
          --cluster ${{ needs.terraform.outputs.ecs_cluster_name }} \
          --service ${{ needs.terraform.outputs.ecs_service_name }} \
          --force-new-deployment
    
    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ needs.terraform.outputs.ecs_cluster_name }} \
          --services ${{ needs.terraform.outputs.ecs_service_name }}
    
    - name: Post-deployment notification
      if: success()
      run: |
        echo "ðŸš€ Successfully deployed to ECS"
        echo "Deployment completed at $(date)"