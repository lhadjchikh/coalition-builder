---
name: Check App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  actions: write

env:
  FRONTEND_PATHS: |
    frontend/
    .github/workflows/test_frontend.yml
    .github/workflows/check_frontend.yml
    .github/workflows/lint_typescript.yml
    .github/workflows/lint_prettier.yml

  BACKEND_PATHS: |
    backend/
    scripts/
    docker-compose.yml
    pyproject.toml
    .github/workflows/test_backend.yml
    .github/workflows/check_backend.yml
    .github/workflows/lint_python.yml

  # SSR paths removed - now part of FRONTEND_PATHS

  TERRAFORM_PATHS: |
    terraform/
    .github/workflows/test_terraform.yml
    .github/workflows/check_terraform.yml
    .github/workflows/lint_terraform.yml
    .github/workflows/lint_go.yml

  FULLSTACK_ONLY_PATHS: |
    .github/workflows/test_fullstack.yml
    .github/workflows/check_app.yml

  DOC_PATHS: |
    *.md
    docs/
    README

jobs:
  analyze_changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      run_frontend: ${{ steps.changes.outputs.run_frontend }}
      run_backend: ${{ steps.changes.outputs.run_backend }}
      run_terraform: ${{ steps.changes.outputs.run_terraform }}
      run_fullstack: ${{ steps.changes.outputs.run_fullstack }}
      docs_only: ${{ steps.changes.outputs.docs_only }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes and determine required tests
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the base branch
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only \
              origin/${{ github.base_ref }}...HEAD)
          elif [ "${{ github.event_name }}" = "push" ]; then
            # For pushes, use github.event.before to capture all changes in the push
            BEFORE_SHA="${{ github.event.before }}"
            if [ -n "$BEFORE_SHA" ] && [ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" ]; then
              CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" HEAD)
            else
              # Fallback for first push or when before SHA is not available
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          else
            # For manual dispatch, compare against main branch
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)

            # If we're already on main, compare with previous commit
            if [ -z "$CHANGED_FILES" ]; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Initialize flags
          RUN_FRONTEND=false
          RUN_BACKEND=false
          RUN_TERRAFORM=false
          RUN_FULLSTACK=false
          DOCS_ONLY=true

          # Build the complete fullstack paths by combining all component paths
          FULLSTACK_PATHS="$FRONTEND_PATHS"$'\n'"$BACKEND_PATHS"$'\n'"$TERRAFORM_PATHS"$'\n'"$FULLSTACK_ONLY_PATHS"

          echo "Full stack paths include:"
          echo "$FULLSTACK_PATHS" | grep -v '^$' | sed 's/^/  - /'

          # Function to check if a file matches any pattern in a list
          matches_pattern() {
            local file="$1"
            local patterns="$2"

            while IFS= read -r pattern; do
              # Skip empty lines
              [[ -z "$pattern" ]] && continue

              # Check if pattern ends with / (directory match)
              if [[ "$pattern" == */ ]]; then
                # Directory pattern - check if file starts with it
                if [[ "$file" == "$pattern"* ]]; then
                  return 0
                fi
              else
                # Use shell glob matching for patterns, exact match for files
                case "$file" in
                  $pattern)
                    return 0
                    ;;
                esac
              fi
            done <<< "$patterns"

            return 1
          }

          # Analyze each changed file
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo "Analyzing: $file"

              # Check if it's a documentation file
              if ! matches_pattern "$file" "$DOC_PATHS"; then
                DOCS_ONLY=false
                echo "  -> Non-documentation file detected"
              fi

              # Check against each test category
              if matches_pattern "$file" "$FRONTEND_PATHS"; then
                RUN_FRONTEND=true
                RUN_FULLSTACK=true
                echo "  -> Frontend tests required"
              fi

              if matches_pattern "$file" "$BACKEND_PATHS"; then
                RUN_BACKEND=true
                RUN_FULLSTACK=true
                echo "  -> Backend tests required"
              fi


              if matches_pattern "$file" "$TERRAFORM_PATHS"; then
                RUN_TERRAFORM=true
                RUN_FULLSTACK=true
                echo "  -> Terraform tests required"
              fi

              # Check if file triggers full stack tests
              if matches_pattern "$file" "$FULLSTACK_PATHS"; then
                RUN_FULLSTACK=true
                echo "  -> Full stack tests required"
              fi
            fi
          done <<< "$CHANGED_FILES"

          # For main branch pushes, always run full stack tests
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "$DOCS_ONLY" = "false" ]; then
            RUN_FULLSTACK=true
            echo "Main branch push - including full stack tests"
          fi

          # Set outputs
          echo "run_frontend=$RUN_FRONTEND" >> $GITHUB_OUTPUT
          echo "run_backend=$RUN_BACKEND" >> $GITHUB_OUTPUT
          echo "run_terraform=$RUN_TERRAFORM" >> $GITHUB_OUTPUT
          echo "run_fullstack=$RUN_FULLSTACK" >> $GITHUB_OUTPUT
          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT

          echo ""
          echo "Test Summary:"
          echo "  Documentation only: $DOCS_ONLY"
          echo "  Frontend tests: $RUN_FRONTEND"
          echo "  Backend tests: $RUN_BACKEND"
          echo "  Terraform tests: $RUN_TERRAFORM"
          echo "  Full stack tests: $RUN_FULLSTACK"

  skip_tests:
    name: Skip Tests (Documentation Only)
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only == 'true'
    steps:
      - name: Documentation only
        run: |
          echo "Skipping tests - only documentation files were changed"
          echo "No application code changes detected"

  # Frontend tests
  frontend-check:
    name: Frontend Check
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only != 'true' && needs.analyze_changes.outputs.run_frontend == 'true'
    uses: ./.github/workflows/check_frontend.yml
    permissions:
      contents: read
      actions: read
      id-token: write

  # Backend tests
  backend-check:
    name: Backend Check
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only != 'true' && needs.analyze_changes.outputs.run_backend == 'true'
    uses: ./.github/workflows/check_backend.yml
    permissions:
      contents: read
      actions: read
      id-token: write

  # Terraform tests
  terraform-check:
    name: Terraform Check
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only != 'true' && needs.analyze_changes.outputs.run_terraform == 'true'
    uses: ./.github/workflows/check_terraform.yml
    permissions:
      contents: read
      id-token: write

  # Full Stack tests
  fullstack-tests:
    name: Full Stack Tests
    needs: analyze_changes
    if: needs.analyze_changes.outputs.docs_only != 'true' && needs.analyze_changes.outputs.run_fullstack == 'true'
    uses: ./.github/workflows/test_fullstack.yml
    permissions:
      contents: read

  tests_complete:
    name: All Tests Complete
    runs-on: ubuntu-latest
    needs:
      [
        analyze_changes,
        skip_tests,
        frontend-check,
        backend-check,
        terraform-check,
        fullstack-tests,
      ]
    if: always()
    steps:
      - name: Check test results
        run: |
          # Check if we skipped tests due to docs only
          if [ "${{ needs.analyze_changes.outputs.docs_only }}" = "true" ]; then
            echo "✅ Documentation only - no tests required"
            exit 0
          fi

          # Check individual test results
          FAILED=false

          if [ "${{ needs.analyze_changes.outputs.run_frontend }}" = "true" ] && [ "${{ needs.frontend-check.result }}" != "success" ] && [ "${{ needs.frontend-check.result }}" != "skipped" ]; then
            echo "❌ Frontend Check failed"
            FAILED=true
          fi

          if [ "${{ needs.analyze_changes.outputs.run_backend }}" = "true" ] && [ "${{ needs.backend-check.result }}" != "success" ] && [ "${{ needs.backend-check.result }}" != "skipped" ]; then
            echo "❌ Backend Check failed"
            FAILED=true
          fi

          if [ "${{ needs.analyze_changes.outputs.run_terraform }}" = "true" ] && [ "${{ needs.terraform-check.result }}" != "success" ] && [ "${{ needs.terraform-check.result }}" != "skipped" ]; then
            echo "❌ Terraform Check failed"
            FAILED=true
          fi

          if [ "${{ needs.analyze_changes.outputs.run_fullstack }}" = "true" ] && [ "${{ needs.fullstack-tests.result }}" != "success" ] && [ "${{ needs.fullstack-tests.result }}" != "skipped" ]; then
            echo "❌ Full Stack Tests failed"
            FAILED=true
          fi

          if [ "$FAILED" = "true" ]; then
            echo "❌ One or more test workflows failed"
            exit 1
          fi

          echo "✅ All required tests passed successfully"
