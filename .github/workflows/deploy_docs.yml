name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - "docs/**"
      - "mkdocs.yml"
      - ".github/workflows/deploy_docs.yml"
  pull_request:
    branches:
      - main
    paths:
      - "docs/**"
      - "mkdocs.yml"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: poetry-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

      - name: Install MkDocs dependencies
        run: pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build Docker images
        run: docker compose build api

      - name: Build API documentation using Docker
        run: |
          mkdir -p backend/docs/_build
          docker compose run --rm -v $(pwd)/backend/docs/_build:/app/docs/_build api sh -c "
            poetry install --with docs &&
            export DJANGO_SETTINGS_MODULE=coalition.core.settings &&
            poetry run sphinx-build -b html docs docs/_build/html
          "

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend documentation
        working-directory: frontend
        run: npm run docs

      - name: Copy API docs to site
        run: |
          mkdir -p docs/api
          cp -r backend/docs/_build/html/* docs/api/

      - name: Copy frontend docs to site
        run: |
          mkdir -p docs/frontend
          cp -r frontend/docs/* docs/frontend/

      - name: Build main documentation
        run: mkdocs build --clean --strict

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
