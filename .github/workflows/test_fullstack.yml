name: Full Stack Integration Tests

on:
  workflow_call: # Allow this workflow to be called by other workflows
  workflow_dispatch:
    inputs:
      ref:
        description: "Git reference to checkout"
        required: false
        default: ""

# Set explicit permissions for the GITHUB_TOKEN
permissions:
  contents: read # Only need read access to checkout the code

jobs:
  integration:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    # We'll run with simplified tests for non app-related changes to save resources
    # but still ensure the deployment workflow is triggered

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build the Docker images with caching
      - name: Build Docker images
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            -t coalition_api:latest \
            .

          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            -t coalition_ssr:latest \
            -f Dockerfile.ssr \
            --build-arg NEXT_PUBLIC_API_URL=http://localhost:8000 \
            --build-arg API_URL=http://api:8000 \
            .

      - name: Start all containers
        run: docker compose up -d

      # Temp fix for https://github.com/docker/build-push-action/issues/252
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to be ready..."
          sleep 30

          # Check if backend is responding
          timeout=60
          until curl -s http://localhost:8000/api/ || [ $timeout -le 0 ]; do
            echo "Waiting for backend API to be ready..."
            sleep 5
            timeout=$((timeout-5))
          done
          if [ $timeout -le 0 ]; then
            echo "Backend API failed to start in time"
            # Continue anyway, as we'll see test failures if API isn't available
          fi

          # IMPORTANT: Test health check with localhost (like ECS does)
          echo "Testing health check endpoint that ECS uses..."
          if curl -f http://localhost:8000/health/; then
            echo "✅ Health check passed - ECS health checks should work"
          else
            echo "❌ Health check failed - ECS health checks will fail in production!"
            echo "This indicates ALLOWED_HOSTS configuration drift between docker-compose and terraform"
            exit 1
          fi

          # Check if SSR is responding with proper health check
          timeout=60
          until curl -s http://localhost:3000/health | jq -e '.status == "healthy"' > /dev/null 2>&1 || [ $timeout -le 0 ]; do
            echo "Waiting for SSR to be ready with healthy status..."
            sleep 5
            timeout=$((timeout-5))
          done
          if [ $timeout -le 0 ]; then
            echo "SSR service failed to start with healthy status in time"
            echo "Current SSR health status:"
            curl -s http://localhost:3000/health || echo "SSR health endpoint not responding"
            # Continue anyway, as we'll see test failures if SSR isn't available
          else
            echo "✅ SSR service started with healthy status"
            curl -s http://localhost:3000/health | jq '.'
          fi

      - name: Create test data
        run: |
          # Run the test data creation script
          docker compose exec -T api bash -c '
          export PYTHONPATH="${PYTHONPATH}:/app"
          python scripts/create_test_data.py
          if [ $? -ne 0 ]; then
            echo "Failed to create test data"
            exit 1
          fi
          '

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install SSR test dependencies
        working-directory: ssr
        run: npm ci

      - name: Check if tests are necessary
        id: check_tests
        run: |
          # Use git to check if any app files were changed
          git fetch origin main
          CHANGES=$(git diff --name-only HEAD origin/main | grep -E "^(frontend/|backend/|ssr/|docker-compose.yml|Dockerfile)" -c || echo 0)

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" && $CHANGES -eq 0 ]]; then
            echo "Running minimal tests for non-app changes to main branch"
            echo "skip_full_tests=true" >> $GITHUB_OUTPUT
          else
            echo "Running full test suite"
            echo "skip_full_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run minimal test (for non-relevant changes)
        if: steps.check_tests.outputs.skip_full_tests == 'true'
        run: |
          echo "Skipping intensive E2E tests for non-relevant changes to ensure deployment workflow gets triggered"
          echo "Minimal test passed, allowing deployment workflow to trigger"

      # Run the E2E tests that test both frontend and backend together
      - name: Run E2E tests
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        working-directory: frontend
        env:
          REACT_APP_API_URL: http://localhost:8000
          # Make sure we don't skip E2E tests
          SKIP_E2E: false
        run: npm run test:e2e

      # Run the SSR integration tests
      - name: Run SSR integration tests
        if: steps.check_tests.outputs.skip_full_tests != 'true'
        working-directory: ssr
        env:
          SSR_URL: http://localhost:3000
          API_URL: http://localhost:8000
          NGINX_URL: http://localhost:80
        run: npm run test:integration

      # Stop all containers when done
      - name: Stop containers
        if: always()
        run: docker compose down
