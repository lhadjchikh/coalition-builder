FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY ssr/package.json ssr/yarn.lock* ssr/package-lock.json* ssr/pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY ssr/ .
# Copy frontend source files needed for shared components
# NOTE: Build context must be project root: docker build -f ssr/Dockerfile .
COPY frontend/src/types ./frontend/src/types
COPY frontend/src/components ./frontend/src/components
COPY frontend/src/services ./frontend/src/services
COPY frontend/src/contexts ./frontend/src/contexts
COPY frontend/src/styles ./frontend/src/styles
COPY shared/ ./shared/

RUN mkdir -p ./public

# Environment variables for build time
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Enable build caching
ARG NEXT_PUBLIC_API_URL
ARG API_URL

# Build with cache enabled
RUN --mount=type=cache,target=/app/.next/cache npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

# Install utilities needed at runtime
RUN apk add --no-cache curl


ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir -p .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy health check files to avoid any conflicts
COPY --from=builder --chown=nextjs:nodejs /app/healthcheck*.js /app/

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
  CMD node healthcheck.ts

# Use Next.js standalone server
CMD ["node", "server.js"]