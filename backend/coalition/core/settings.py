"""
Django settings for coalition project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from urllib.parse import quote

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-insecure-=lvqp2vsu5)=!t*_qzm3%h%7btagcgw1#cj^sut9f@95^vbclv",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "t")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Add testserver for Django tests
if "test" in sys.argv or "testserver" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("testserver")

# CSRF Protection Configuration
# Define trusted origins for CSRF token validation
# This should include all domains that will make requests to the Django API
CSRF_TRUSTED_ORIGINS = []

# Parse from environment variable (comma-separated URLs with protocols)
csrf_origins_env = os.getenv("CSRF_TRUSTED_ORIGINS", "")
if csrf_origins_env:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins_env.split(",")]

# Add default origins for development
if DEBUG:
    default_origins = [
        "http://localhost:3000",  # Next.js frontend
        "http://127.0.0.1:3000",
        "http://localhost:8000",  # Django development server
        "http://127.0.0.1:8000",
    ]
    for origin in default_origins:
        if origin not in CSRF_TRUSTED_ORIGINS:
            CSRF_TRUSTED_ORIGINS.append(origin)

# Additional CSRF security settings
CSRF_COOKIE_SECURE = not DEBUG  # Only send CSRF cookie over HTTPS in production
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token
CSRF_COOKIE_SAMESITE = "Lax"  # Reasonable default for most applications
CSRF_USE_SESSIONS = False  # Use cookie-based CSRF tokens (more flexible)

ORGANIZATION_NAME = os.getenv("ORGANIZATION_NAME", "Coalition Builder")
TAGLINE = os.getenv("ORG_TAGLINE", "Building strong advocacy partnerships")
CONTACT_EMAIL = os.getenv("CONTACT_EMAIL", "info@example.org")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_ratelimit",
    "coalition.core.apps.CoreConfig",
    "coalition.campaigns.apps.CampaignsConfig",
    "coalition.legislators.apps.LegislatorsConfig",
    "coalition.regions.apps.RegionsConfig",
    "coalition.stakeholders",
    "coalition.endorsements",
]

# Configure database table names to maintain backward compatibility
DATABASE_ROUTERS = []
DEFAULT_APP_CONFIG = None

MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "coalition.core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # Add this line
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "coalition.core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use SQLite as a fallback if DATABASE_URL is not set
if os.getenv("DATABASE_URL"):
    # Parse DATABASE_URL and ensure PostGIS is used for PostgreSQL
    db_config = dj_database_url.config(default=quote(os.getenv("DATABASE_URL", "")))

    # If using PostgreSQL, make sure to use the PostGIS backend
    if db_config.get("ENGINE") == "django.db.backends.postgresql":
        db_config["ENGINE"] = "django.contrib.gis.db.backends.postgis"

    # For tests, use admin user to create test databases with PostGIS extension
    if "test" in sys.argv:
        # Use admin credentials for test database creation
        db_config.update(
            {
                "USER": "coalition_admin",
                "PASSWORD": "admin_password",
            },
        )

    DATABASES = {
        "default": db_config,
    }
else:
    # Use SpatiaLite for GeoDjango support
    DATABASES = {
        "default": {
            "ENGINE": "django.contrib.gis.db.backends.spatialite",
            "NAME": BASE_DIR / "db.sqlite3",
        },
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# WhiteNoise configuration for better static file serving
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Static files directories - where Django will look for static files during development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # Add frontend build directory for local development
    os.path.join(BASE_DIR.parent, "frontend", "build", "static"),
]

# Additional static file finder configuration
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email configuration
# https://docs.djangoproject.com/en/5.2/topics/email/

if DEBUG:
    # Development: Log emails to console
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    # Production: Use SMTP
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
    EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "t")
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Default sender for system emails
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", CONTACT_EMAIL)
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Site configuration for email links
SITE_URL = os.getenv("SITE_URL", "http://localhost:3000")  # Frontend URL
API_URL = os.getenv("API_URL", "http://localhost:8000")  # Backend URL

# Admin notification emails for endorsement system
ADMIN_NOTIFICATION_EMAILS = os.getenv("ADMIN_NOTIFICATION_EMAILS", "")

# Endorsement moderation settings
# Default to manual review for better content control in production
# Set AUTO_APPROVE_VERIFIED_ENDORSEMENTS=true in environment to enable auto-approval
AUTO_APPROVE_VERIFIED_ENDORSEMENTS = os.getenv(
    "AUTO_APPROVE_VERIFIED_ENDORSEMENTS",
    "false",
).lower() in ("true", "1", "t")

# Akismet spam detection
AKISMET_SECRET_API_KEY = os.getenv("AKISMET_SECRET_API_KEY")

# Geocoding configuration
# Tiger geocoder confidence threshold (lower rating = better accuracy)
# Default: 20 (reasonable confidence for most use cases)
# Range: 0-100, where 0 is exact match and 100 is no match
# Recommended values:
#   - Urban areas: 10-15 (stricter matching)
#   - Suburban areas: 15-25 (balanced)
#   - Rural areas: 20-30 (more lenient)
TIGER_GEOCODING_CONFIDENCE_THRESHOLD = int(
    os.getenv("TIGER_GEOCODING_CONFIDENCE_THRESHOLD", "20"),
)

# Cache configuration
# Always use Redis cache for consistency across all environments
# This ensures django-ratelimit works properly in all scenarios
CACHE_URL = os.getenv("CACHE_URL", "redis://redis:6379/1")

# Use locmem cache during tests and disable ratelimit checks
if "test" in sys.argv:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "test-cache",
        },
    }
    # Disable django-ratelimit system checks during tests
    SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": CACHE_URL,
        },
    }
