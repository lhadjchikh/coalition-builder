# Generated by Django 5.2.4 on 2025-07-10 23:06

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        help_text="Name of the organization",
                        max_length=200,
                    ),
                ),
                (
                    "tagline",
                    models.CharField(
                        help_text="Brief tagline or slogan for the organization",
                        max_length=500,
                    ),
                ),
                (
                    "hero_title",
                    models.CharField(
                        help_text="Main headline displayed prominently on the homepage",
                        max_length=300,
                    ),
                ),
                (
                    "hero_subtitle",
                    models.TextField(
                        blank=True,
                        help_text="Optional subtitle or description under the hero title",
                    ),
                ),
                (
                    "hero_background_image",
                    models.ImageField(
                        blank=True,
                        help_text="Hero background image (optional)",
                        null=True,
                        upload_to="backgrounds/",
                    ),
                ),
                (
                    "about_section_title",
                    models.CharField(
                        default="About Our Mission",
                        help_text="Title for the about/mission section",
                        max_length=200,
                    ),
                ),
                (
                    "about_section_content",
                    models.TextField(
                        help_text="Main content describing the organization's mission and goals",
                    ),
                ),
                (
                    "cta_title",
                    models.CharField(
                        default="Get Involved",
                        help_text="Title for the call-to-action section",
                        max_length=200,
                    ),
                ),
                (
                    "cta_content",
                    models.TextField(
                        blank=True,
                        help_text="Description for how people can get involved",
                    ),
                ),
                (
                    "cta_button_text",
                    models.CharField(
                        default="Learn More",
                        help_text="Text for the call-to-action button",
                        max_length=100,
                    ),
                ),
                (
                    "cta_button_url",
                    models.URLField(
                        blank=True,
                        help_text="URL for the call-to-action button",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Primary contact email address",
                        max_length=254,
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone number (optional)",
                        max_length=20,
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(blank=True, help_text="Facebook page URL"),
                ),
                (
                    "twitter_url",
                    models.URLField(blank=True, help_text="Twitter/X profile URL"),
                ),
                (
                    "instagram_url",
                    models.URLField(blank=True, help_text="Instagram profile URL"),
                ),
                (
                    "linkedin_url",
                    models.URLField(blank=True, help_text="LinkedIn page URL"),
                ),
                (
                    "campaigns_section_title",
                    models.CharField(
                        default="Policy Campaigns",
                        help_text="Title for the campaigns section",
                        max_length=200,
                    ),
                ),
                (
                    "campaigns_section_subtitle",
                    models.TextField(
                        blank=True,
                        help_text="Optional subtitle for the campaigns section",
                    ),
                ),
                (
                    "show_campaigns_section",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to display the campaigns section on the homepage",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this homepage configuration is active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this homepage configuration was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this homepage configuration was last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Homepage Configuration",
                "verbose_name_plural": "Homepage Configurations",
                "db_table": "homepage",
            },
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name for this theme (e.g., 'Default', 'Land and Bay Stewards')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of this theme",
                        null=True,
                    ),
                ),
                (
                    "primary_color",
                    models.CharField(
                        default="#2563eb",
                        help_text="Primary brand color (hex format, e.g., #2563eb)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "secondary_color",
                    models.CharField(
                        default="#64748b",
                        help_text="Secondary brand color (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "accent_color",
                    models.CharField(
                        default="#059669",
                        help_text="Accent color for highlights and calls-to-action (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "background_color",
                    models.CharField(
                        default="#ffffff",
                        help_text="Main background color (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "section_background_color",
                    models.CharField(
                        default="#f9fafb",
                        help_text="Alternate section background color (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "card_background_color",
                    models.CharField(
                        default="#ffffff",
                        help_text="Card/content block background color (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "heading_color",
                    models.CharField(
                        default="#111827",
                        help_text="Color for headings and titles (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "body_text_color",
                    models.CharField(
                        default="#374151",
                        help_text="Color for body text (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "muted_text_color",
                    models.CharField(
                        default="#6b7280",
                        help_text="Color for muted/secondary text (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "link_color",
                    models.CharField(
                        default="#2563eb",
                        help_text="Color for links (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "link_hover_color",
                    models.CharField(
                        default="#1d4ed8",
                        help_text="Color for links on hover (hex format)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Color must be a valid hex code (e.g., #FF0000 or #F00)",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            ),
                        ],
                    ),
                ),
                (
                    "heading_font_family",
                    models.CharField(
                        default='ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',
                        help_text="Font family for headings (CSS font-family value)",
                        max_length=200,
                    ),
                ),
                (
                    "body_font_family",
                    models.CharField(
                        default='ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',
                        help_text="Font family for body text (CSS font-family value)",
                        max_length=200,
                    ),
                ),
                (
                    "google_fonts",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of Google Font family names to load (e.g., ['Merriweather', 'Barlow'])",
                    ),
                ),
                (
                    "font_size_base",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="Base font size in rem units (e.g., 1.00 for 16px)",
                        max_digits=3,
                    ),
                ),
                (
                    "font_size_small",
                    models.DecimalField(
                        decimal_places=3,
                        default=0.875,
                        help_text="Small font size in rem units",
                        max_digits=4,
                    ),
                ),
                (
                    "font_size_large",
                    models.DecimalField(
                        decimal_places=3,
                        default=1.125,
                        help_text="Large font size in rem units",
                        max_digits=4,
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Organization logo image",
                        null=True,
                        upload_to="logos/",
                    ),
                ),
                (
                    "logo_alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for logo (accessibility)",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "favicon",
                    models.ImageField(
                        blank=True,
                        help_text="Favicon image",
                        null=True,
                        upload_to="favicons/",
                    ),
                ),
                (
                    "custom_css",
                    models.TextField(
                        blank=True,
                        help_text="Additional custom CSS for advanced styling (optional)",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this theme is currently active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this theme was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this theme was last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Theme",
                "verbose_name_plural": "Themes",
                "db_table": "theme",
                "ordering": ["-is_active", "-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ContentBlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional title for this content block",
                        max_length=200,
                    ),
                ),
                (
                    "block_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Block"),
                            ("image", "Image Block"),
                            ("text_image", "Text + Image Block"),
                            ("quote", "Quote Block"),
                            ("stats", "Statistics Block"),
                            ("custom_html", "Custom HTML Block"),
                        ],
                        default="text",
                        help_text="Type of content block",
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Main content for this block (text, HTML, etc.)",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Image for image or text+image blocks",
                        null=True,
                        upload_to="content_blocks/",
                    ),
                ),
                (
                    "image_alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for the image (accessibility)",
                        max_length=200,
                    ),
                ),
                (
                    "image_title",
                    models.CharField(
                        blank=True,
                        help_text="Title of the image for attribution",
                        max_length=200,
                    ),
                ),
                (
                    "image_author",
                    models.CharField(
                        blank=True,
                        help_text="Author/photographer of the image",
                        max_length=200,
                    ),
                ),
                (
                    "image_license",
                    models.CharField(
                        blank=True,
                        help_text="License of the image (e.g., 'CC BY 2.0', 'All rights reserved')",
                        max_length=100,
                    ),
                ),
                (
                    "image_source_url",
                    models.URLField(
                        blank=True,
                        help_text="Source URL where the image was obtained",
                    ),
                ),
                (
                    "css_classes",
                    models.CharField(
                        blank=True,
                        help_text="Additional CSS classes for styling (optional)",
                        max_length=200,
                    ),
                ),
                (
                    "background_color",
                    models.CharField(
                        blank=True,
                        help_text="Background color in hex format (e.g., #ffffff)",
                        max_length=7,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which this block appears (lower numbers first)",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this block is visible on the homepage",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this content block was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this content block was last updated",
                    ),
                ),
                (
                    "homepage",
                    models.ForeignKey(
                        help_text="The homepage this content block belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_blocks",
                        to="content.homepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Block",
                "verbose_name_plural": "Content Blocks",
                "db_table": "content_block",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.AddField(
            model_name="homepage",
            name="theme",
            field=models.ForeignKey(
                blank=True,
                help_text="Theme to use for this homepage (optional, falls back to active theme)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="content.theme",
            ),
        ),
    ]
