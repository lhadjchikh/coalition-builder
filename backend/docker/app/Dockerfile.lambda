# Application image for AWS Lambda deployment
# Uses the geolambda base image with GDAL/GEOS/PROJ pre-installed
FROM geolambda:3.10.3 AS app

# Set working directory for Lambda
WORKDIR /var/task

# Install Poetry for dependency management
RUN pip install --no-cache-dir poetry==1.7.1

# Copy dependency files first (for better caching)
COPY pyproject.toml poetry.lock ./

# Install Python dependencies without creating a virtual environment
# Lambda provides the runtime environment
RUN poetry config virtualenvs.create false && \
    poetry install --no-root --no-dev --no-interaction --no-ansi

# Install Zappa for Lambda handler
RUN pip install --no-cache-dir zappa==0.59.0

# Copy application code
COPY coalition/ ./coalition/
COPY scripts/ ./scripts/
COPY manage.py ./

# Copy any static files that need to be included
COPY static/ ./static/ 2>/dev/null || true

# Create necessary directories
RUN mkdir -p /tmp/media /tmp/static

# Set Python path
ENV PYTHONPATH=/var/task:$PYTHONPATH \
    DJANGO_SETTINGS_MODULE=coalition.core.settings

# Pre-compile Python files for faster cold starts
RUN python -m compileall -b coalition

# Collect static files (if needed for Lambda)
# This is optional as static files are usually served from S3
RUN python manage.py collectstatic --noinput || true

# Lambda handler configuration
# Zappa will look for this handler
ENV LAMBDA_HANDLER=handler.lambda_handler

# The CMD is not used by Lambda but included for local testing
CMD ["handler.lambda_handler"]