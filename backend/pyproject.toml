[tool.poetry]
name = "coalition"
version = "0.1.0"
description = "Coalition Builder"
authors = ["Leila Hadj-Chikh <lhadjchikh@gmail.com>"]
license = "n"
readme = "README.md"
packages = [
    { include = "coalition" },
    { include = "scripts" } 
]

[tool.poetry.scripts]
lint = "scripts.lint:main"

[tool.poetry.dependencies]
python = "^3.13"
django = "^5.2.1"
django-ninja = "^1.4.2"
dj-database-url = "^2.3.0"
whitenoise = "^6.9.0"
psycopg = "^3.2.9"
gunicorn = "^23.0.0"
psutil = "^7.0.0"
akismet = "^24.11.0"
email-validator = "^2.1.1"
django-ratelimit = "^4.1.0"
redis = "^5.2.0"
bleach = {extras = ["css"], version = "^6.2.0"}
django-extensions = "^4.1"
django-lockdown = "^5.0.0"
django-storages = {extras = ["s3"], version = "^1.14.4"}
pillow = "^11.0.0"
gdal = "3.10.3"
requests = "^2.32.4"
django-tinymce = "^4.1.0"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
ruff = "^0.11.12"
pytest = "^8.3.3"
pytest-django = "^4.9.0"
pytest-cov = "^6.0.0"
pytest-xdist = "^3.6.1"
mypy = "^1.14.0"
django-stubs = {extras = ["compatible-mypy"], version = "^5.1.1"}
types-requests = "^2.32.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-autodoc-typehints = "^2.0.0"
sphinx-autoapi = "^3.0.0"
sphinx-rtd-theme = "^3.0.2"
myst-parser = "^2.0.0"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"
mkdocs-git-revision-date-localized-plugin = "^1.3.0"
pydotplus = "^2.0.2"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I", "C90", "N", "B", "UP", "ANN", "A", "COM", "C4", "DTZ", "T10", "T20", "PT", "Q", "SIM", "ARG", "ERA"]
ignore = [
    "ARG001",  # Unused function argument - common in Django views/handlers
    "PT027",   # Use pytest.raises instead of unittest assertRaises - Django uses unittest
    "ANN401",  # Allow Any in Django model save method *args, **kwargs
]

# Disable specific rules for certain paths
[tool.ruff.lint.per-file-ignores]
"scripts/*.py" = ["T201"]  # Allow print statements in scripts directory
"*/migrations/*.py" = ["E501", "ANN"]  # Ignore line length and type annotations in migrations

[tool.ruff.lint.isort]
known-first-party = ["coalition", "campaigns", "endorsers", "legislators", "regions", "api"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "coalition.core.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = [
    "--cov=coalition",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]

[tool.coverage.run]
source = ["coalition"]
omit = [
    "**/migrations/*",
    "**/tests/*",
    "**/tests.py",
    "**/test_*.py",
    "**/*_tests.py",
    "**/management/commands/*",
    "coalition/core/settings.py"
]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = false  # Start gradually, can be enabled later
strict_optional = true
warn_no_return = true
warn_return_any = true
show_error_codes = true
show_column_numbers = true
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "coalition.core.settings"

[[tool.mypy.overrides]]
module = [
    "*.migrations.*",
    "manage",
    "*.tests.*",
    "coalition.*.tests",
    "coalition.endorsements.tests",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "akismet.*",
    "bleach.*",
    "django_ratelimit.*",
    "storages.*",
    "tinymce.*",
    "gdal.*",
]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"