services:
  db:
    image: postgis/postgis:16-3.4
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - type: bind
        source: ./backend/scripts/init-db.sh
        target: /docker-entrypoint-initdb.d/init-db.sh
        read_only: true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=${DB_NAME:-coalition}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  api:
    image: coalition_api:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Load .env file if it exists (create from .env.example)
    env_file:
      - path: ./backend/.env
        required: false
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_replace_in_production}
      - DATABASE_URL=postgis://${APP_DB_USERNAME:-coalition_app}:${APP_DB_PASSWORD:-app_password}@db:5432/${DB_NAME:-coalition}
      - CACHE_URL=${CACHE_URL:-redis://redis:6379/1}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,api,nginx,app}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-}
      - PYTHONPATH=/app
      # Site password protection settings
      - SITE_PASSWORD_ENABLED=${SITE_PASSWORD_ENABLED:-false}
      - SITE_USERNAME=${SITE_USERNAME:-admin}
      - SITE_PASSWORD=${SITE_PASSWORD:-changeme}
    ports:
      - "8000:8000"
    networks:
      - app-network

  app:
    image: coalition_app:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - CLOUDFRONT_DOMAIN=${CLOUDFRONT_DOMAIN:-}
        - BACKEND_DOMAIN=${BACKEND_DOMAIN:-}
    depends_on:
      - api
    # Load .env file if it exists (create from .env.example)
    env_file:
      - path: ./frontend/.env
        required: false
    environment:
      - NODE_ENV=production
      - API_URL=http://api:8000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - PORT=3000
      # Image optimization
      - CLOUDFRONT_DOMAIN=${CLOUDFRONT_DOMAIN:-}
      - BACKEND_DOMAIN=${BACKEND_DOMAIN:-}
      # Site password protection settings
      - SITE_PASSWORD_ENABLED=${SITE_PASSWORD_ENABLED:-false}
      - SITE_USERNAME=${SITE_USERNAME:-admin}
      - SITE_PASSWORD=${SITE_PASSWORD:-changeme}
      # Analytics settings
      - NEXT_PUBLIC_GA_TRACKING_ID=${NEXT_PUBLIC_GA_TRACKING_ID:-}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  # Nginx reverse proxy for local development (optional)
  nginx:
    image: nginx:alpine
    depends_on:
      - api
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
