services:
  db:
    image: postgis/postgis:16-3.4
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - type: bind
        source: ./init-db.sh
        target: /docker-entrypoint-initdb.d/init-db.sh
        read_only: true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=${DB_NAME:-coalition}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  api:
    image: coalition_api:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=False
      - SECRET_KEY=dev_secret_key_replace_in_production
      - DATABASE_URL=postgis://${APP_DB_USERNAME:-coalition_app}:${APP_DB_PASSWORD:-app_password}@db:5432/${DB_NAME:-coalition}
      - CACHE_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=localhost,127.0.0.1,api,ssr,nginx
      - PYTHONPATH=/app/backend
    ports:
      - "8000:8000"
    networks:
      - app-network

  ssr:
    image: coalition_ssr:latest
    build:
      context: .
      dockerfile: Dockerfile.ssr
    depends_on:
      - api
    environment:
      - NODE_ENV=production
      - API_URL=http://api:8000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - PORT=3000
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  # Nginx reverse proxy for local development (optional)
  nginx:
    image: nginx:alpine
    depends_on:
      - api
      - ssr
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
